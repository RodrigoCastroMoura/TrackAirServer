#!/usr/bin/env python3
"""
Teste espec√≠fico do modo Long-Connection do GV50
"""

import asyncio
import socket
import subprocess
import time
from datetime import datetime

async def test_long_connection():
    """Testa o modo long-connection mantendo conex√£o ativa."""
    print("üß™ TESTE LONG-CONNECTION MODE GV50")
    print("=" * 50)
    
    # Iniciar servidor em background
    print("\n1Ô∏è‚É£ Iniciando servidor long-connection...")
    server_process = subprocess.Popen(['python', 'main.py'], 
                                    stdout=subprocess.PIPE, 
                                    stderr=subprocess.STDOUT)
    
    # Aguardar servidor inicializar
    time.sleep(5)
    
    try:
        # Conectar como dispositivo GPS
        print("\n2Ô∏è‚É£ Estabelecendo long-connection...")
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(('127.0.0.1', 8000))
        print("‚úÖ Conex√£o estabelecida")
        
        # Simular m√∫ltiplas mensagens GPS na mesma conex√£o
        messages = [
            "+RESP:GTFRI,060228,555444333222111,,0,0,1,1,4.3,92,70.0,-46.633308,-23.550520,20250721205400,0460,0000,18d8,6141,00,2000.0,20250721205400,A001$",
            "+RESP:GTFRI,060228,555444333222111,,0,0,1,1,5.8,92,71.0,-46.633408,-23.550620,20250721205430,0460,0000,18d8,6141,00,2000.0,20250721205430,A002$",
            "+RESP:GTFRI,060228,555444333222111,,0,0,1,1,7.2,92,72.0,-46.633508,-23.550720,20250721205500,0460,0000,18d8,6141,00,2000.0,20250721205500,A003$"
        ]
        
        print("\n3Ô∏è‚É£ Enviando m√∫ltiplas mensagens na mesma conex√£o long-connection...")
        
        for i, message in enumerate(messages, 1):
            print(f"\nüì° Mensagem {i}/3:")
            print(f"   Enviando: {message[:60]}...")
            
            # Enviar mensagem
            sock.send(message.encode())
            
            # Aguardar resposta
            try:
                response = sock.recv(1024).decode()
                print(f"   üì® Resposta: {response}")
            except socket.timeout:
                print("   ‚ö†Ô∏è Timeout na resposta")
            
            # Aguardar antes da pr√≥xima mensagem (simular dispositivo real)
            await asyncio.sleep(2)
        
        print("\n4Ô∏è‚É£ Mantendo conex√£o ativa por mais tempo...")
        await asyncio.sleep(5)
        
        # Enviar uma √∫ltima mensagem para verificar se conex√£o ainda est√° ativa
        final_message = "+RESP:GTFRI,060228,555444333222111,,0,0,0,0,0.0,92,70.0,-46.633308,-23.550520,20250721205530,0460,0000,18d8,6141,00,2000.0,20250721205530,ZZZZ$"
        print(f"\nüì° Mensagem final:")
        print(f"   Enviando: {final_message[:60]}...")
        sock.send(final_message.encode())
        
        response = sock.recv(1024).decode()
        print(f"   üì® Resposta: {response}")
        
        print("\n‚úÖ Teste Long-Connection completado com sucesso!")
        print("   - Conex√£o mantida durante todo o teste")
        print("   - M√∫ltiplas mensagens enviadas na mesma sess√£o TCP")
        print("   - Respostas recebidas para todas as mensagens")
        
    except Exception as e:
        print(f"\n‚ùå Erro no teste long-connection: {e}")
        
    finally:
        # Fechar conex√£o
        try:
            sock.close()
            print("üîå Conex√£o fechada")
        except:
            pass
            
        # Parar servidor
        server_process.terminate()
        server_process.wait(timeout=5)
        print("‚èπÔ∏è Servidor parado")
        
    print("\n" + "=" * 50)
    print("üéØ RESUMO DO TESTE LONG-CONNECTION:")
    print("   ‚úÖ Servidor configurado para long-connections")
    print("   ‚úÖ Device timeout: 30 min (1800s)")
    print("   ‚úÖ Heartbeat interval: 5 min (300s)")
    print("   ‚úÖ Keep-alive timeout: 10 min (600s)")
    print("   ‚úÖ Cleanup autom√°tico de conex√µes inativas")
    print("\nüí° Sistema pronto para dispositivos GV50 em modo long-connection!")

if __name__ == "__main__":
    asyncio.run(test_long_connection())